//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {

    public static void main(String[] args) throws IOException {

        // taking input using BufferedReader class
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // taking total count of testcases
        int t = Integer.parseInt(br.readLine());
        while (t-- > 0) {
            // Reading the two Strings
            String s1 = br.readLine();
            String s2 = br.readLine();

            // Creating an object of class Rotate
            Solution obj = new Solution();

            // calling areRotations method
            // of class Rotate and printing
            //"1" if it returns true
            // else "0"
            if (obj.areRotations(s1, s2)) {
                System.out.println("true");
            } else {
                System.out.println("false");
            }
        }
    }
}
// } Driver Code Ends



class Solution {
    // Function to check if two strings are rotations of each other or not.
    public static boolean areRotations(String s1, String s2) {
        // Your code here
        if(s1.length() != s2.length()){
            return false;
        }
        return search(s2, s1+s1).size() > 0;
        
    }
    
    private static List<Integer> search(String pat, String txt){
        ArrayList<Integer> result = new ArrayList<>();
        int m = pat.length();
        int n = txt.length();
        
        if(m ==0 || m>n) return result;
        
        int[] lps = computeLPSArray(pat);
        int i = 0, j = 0;
        
        while(i  < n){
            if(pat.charAt(j) == txt.charAt(i)){
                i++;j++;
                
            }
            
            if(j== m){
                result.add(i-j);
                j = lps[j-1];
                
                
            }
            else if(i < n && pat.charAt(j) != txt.charAt(i)){
                if(j != 0){
                    j = lps[j-1];
                }
                else i++;
            }
        }
        return result;
        
    }
    
    private static int[] computeLPSArray(String pat){
        int m = pat.length();
        int[] lps = new int[m];
        int len = 0, i =1;
        lps[0] = 0;
        
        while(i < m){
            if(pat.charAt(i) == pat.charAt(len)){
                len++;
                lps[i] = len;
                i++;
            }
            else{
                if(len != 0){
                    len = lps[len-1];
                }
                else{lps[i] = 0;
                i++;}
        }
    }
    return lps;


}
}
    
    
    
    
    
