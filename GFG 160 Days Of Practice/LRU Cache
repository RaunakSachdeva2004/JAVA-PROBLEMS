class LRUCache {
    
    static int capacity;
    static LinkedHashMap<Integer, Integer> cache;

    LRUCache(int cap) {
        // code here
        capacity = cap;
        cache = new LinkedHashMap<>(cap, 0.75f, true){
            protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest){
                return size() > capacity;
            } 
        };
        
    }

    public static int get(int key) {
        // your code here
        return cache.getOrDefault(key, -1);
    }

        
    public static void put(int key, int value) {
        // your code here
        cache.put(key,value);
    }
}
